version: 2.1

executors:
  android:
    docker:
      - image: circleci/android:api-29
    working_directory: ~/litera

jobs:
  prepare:
    executor: android
    steps:
      - checkout
      - run:
          name: Generate key.properties file
          command: sh load.sh
      - run:
          name: Generate google-services.json file
          command: echo $GOOGLE_SERVICES | base64 -d >> ~/litera/app/google-services.json
      - persist_to_workspace:
          root: ~/litera
          paths:
            - key.properties
            - app/google-services.json

  test:
    executor: android
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - attach_workspace:
          at: ~/litera
      - run:
          name: Make gradlew executable
          command: chmod +x gradlew
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Deps
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Tests
          command: ./gradlew app:detekt app:lintDebug app:testDebugUnitTest
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

  test_ftl:
    executor: android
    environment:
      GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
    steps:
      - checkout
      - attach_workspace:
          at: ~/litera
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Make gradlew executable
          command: chmod +x gradlew
      - run:
          name: Build APKs
          command: |
            ./gradlew :app:assembleDebug
            ./gradlew :app:assembleDebugAndroidTest
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
      - run:
          name: Run instrumented tests
          command: >
            sudo gcloud firebase test android run \
              --app app/build/outputs/apk/debug/app-debug.apk \
              --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              --device model=Pixel2,version=28,locale=en,orientation=portrait \
              --num-flaky-test-attempts=0 \
              --use-orchestrator | tee -a ~/ftl.txt
      - store_artifacts:
          path: ~/ftl.txt
          destination: ftl.txt

  build_debug_apk:
    executor: android
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - attach_workspace:
          at: ~/litera
      - run:
          name: Make gradlew executable
          command: chmod +x gradlew
      - run:
          name: Build apk
          command: ./gradlew app:assembleDebug
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
      - run:
          name: Upload to App Distribution
          command: ./gradlew app:appDistributionUploadDebug
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - store_artifacts:
          path: app/build/outputs/apk/debug

  build_release_bundle:
    executor: android
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - attach_workspace:
          at: ~/litera
      - run:
          name: Make gradlew executable
          command: chmod +x gradlew
      - run:
          name: Build bundle
          command: ./gradlew app:bundleRelease
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - store_artifacts:
          path: app/build/outputs/bundle/release
          destination: bundle
      - store_artifacts:
          path: app/build/outputs/mapping/release
          destination: mapping

workflows:
  version: 2.1
  build:
    jobs:
      - prepare
      - test:
          requires:
            - prepare
      - test_ftl:
          requires:
            - prepare
      - build_debug_apk:
          requires:
            - test
            - test_ftl
      - approve_release:
          type: approval
          requires:
            - build_debug_apk
          filters:
            branches:
              only: master
            tags:
              only: /.*/
      - build_release_bundle:
          requires:
            - approve_release
          filters:
            branches:
              only: master
            tags:
              only: /.*/
