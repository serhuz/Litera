apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.appdistribution'
apply from: "$rootDir/detekt/detekt.gradle"

buildscript {
    repositories {
        google()
    }
    dependencies {
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.3.1'
    }
}

def keyPropsFile = rootProject.file('key.properties')
def keyProps = new Properties()
keyProps.load(new FileInputStream(keyPropsFile))

import org.ajoberstar.grgit.Grgit

def generateVersionCode() {
    def isOnMaster = grgit.branch.current().fullName == 'master'
    def isCircleCiBuild = Boolean.parseBoolean(System.getenv('CIRCLECI') ?: 'false')
    return (isOnMaster && isCircleCiBuild) ? System.getenv('CIRCLE_BUILD_NUM').toInteger() : 1
}

def generateVersionName() {
    def repo = Grgit.open(dir: project.rootDir)
    def head = repo.head()
    def headTag = repo.tag.list().find { it.commit == head }
    return (headTag == null) ? new Date().format("yyyyMMdd-HHmm") : headTag.fullName
}

android {

    compileSdkVersion 29

    defaultConfig {
        applicationId "ua.sergeimunovarov.litera"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode generateVersionCode()
        versionName generateVersionName()

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField("String", "DB_NAME", "\"litera.db\"")
        buildConfigField("String", "PRIVACY_POLICY_URL", "\"https://serhuz.github.io/litera-app/privacy_policy\"")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        debug {
            keyAlias keyProps['debugKeyAlias']
            keyPassword keyProps['debugKeyPassword']
            storeFile file(keyProps['debugStoreFile'])
            storePassword keyProps['debugStorePassword']
        }

        release {
            keyAlias keyProps['releaseKeyAlias']
            keyPassword keyProps['releaseKeyPassword']
            storeFile file(keyProps['releaseStoreFile'])
            storePassword keyProps['releaseStorePassword']
        }
    }

    sourceSets.each { sourceSet ->
        def name = sourceSet.getName()
        sourceSet.java.srcDirs += "src/$name/kotlin"
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            applicationIdSuffix '.dbg'

            buildConfigField('String', 'BUILD_DATE', "\"${new Date().toString()}\"")
            resValue("bool", "show_debug_settings", "true")

            firebaseAppDistribution {
                serviceCredentialsFile = "${System.getenv('HOME')}/gcloud-service-key.json"
                groups = "group1"
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            resValue("bool", "show_debug_settings", "false")

            firebaseAppDistribution {
                serviceCredentialsFile = "${System.getenv('HOME')}/gcloud-service-key.json"
                groups = "group1"
            }
        }
    }
}

ext {
    lifecycleVersion = '2.2.0'
    roomVersion = '2.2.4'
    preferenceVersion = "1.1.0"
    daggerVersion = '2.26'
    koinVersion= "2.1.4"

    coroutinesVersion = '1.3.4'

    espressoVersion = '3.2.0'
    mockitoVersion = '3.3.1'
}

dependencies {
    implementation "androidx.annotation:annotation:1.1.0"
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'androidx.fragment:fragment-ktx:1.2.2'
    implementation "androidx.preference:preference-ktx:$preferenceVersion"
    implementation "com.google.android.material:material:1.1.0"
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    implementation "androidx.paging:paging-runtime-ktx:2.1.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    implementation "com.google.firebase:firebase-core:17.2.3"
    implementation 'com.google.firebase:firebase-analytics:17.2.3'
    implementation "com.google.firebase:firebase-ads:19.0.0"

    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-androidx-scope:$koinVersion"
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"

    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "org.assertj:assertj-core:2.9.0"
    androidTestImplementation "androidx.test:core:1.2.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
}

task copyResources(type: Copy, dependsOn: 'assembleDebug') {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/intermediates/classes/test/debug/res"
}

apply plugin: 'com.google.gms.google-services'
